import Head from 'next/head'
import Layout from "@/Layout";
import * as Styled from './styles'
import { Star, User } from '@phosphor-icons/react';
import { theme } from '@/styles/stitches.config';
import { ReactElement, useCallback, useEffect, useState } from 'react';
import { BookCardReduce } from '@/components/Book/BookCardReduce';
import { SearchInput } from '@/components/SearchInput';
import { User as UserComponent } from './components/User';
import { api } from '@/services/http';
import { RatingCard } from './components/RatingCard';
import { useRouter } from 'next/router';
import { IBaseBook, IBaseRating, IBaseUser } from '@/interface/IBooks';
import DefaultLayout from '@/Layout';
import { NextPageWithLayout } from '../_app.page';
import { publishedDateFormat } from '@/utils/published-date-format';

interface IRequestRatings extends IBaseRating {
  book: IBaseBook;
}

interface IUserRatings {
  rating: IBaseRating;
  book: IBaseBook;
}

type RatingsByDate = Record<string, IUserRatings[]>;


const Profile: NextPageWithLayout = () => {
  const {query} = useRouter();
    
  const [userRatings, setUserRatings] = useState<RatingsByDate>({});
  const [user, setUser] = useState<IBaseUser>({} as IBaseUser);
  
  const [isLoading, setIsLoading] = useState(true);
  
  const getLatestRatings = useCallback(async () => {
    if(!query.id) return;

    try {
      setIsLoading(true);    
      const url = `/user/latest-ratings/${query.id}`;
      const fetch_user_url = `/user/${query.id}`;

      const response = await api.get<IRequestRatings[]>(url);
      const user_response = await api.get(fetch_user_url);
      
      const organizedData = response.data.reduce((acc, rating) => {
        const date = new Date(rating.created_at).toDateString();

        if (!acc[date]) {
          acc[date] = [];
        }

        acc[date].push({
          rating: {
            id: rating.id,
            book_id: rating.book_id,
            description: rating.description,
            rate: rating.rate,
            created_at: rating.created_at
          },
          book: {
            id: rating.book.id,
            author: rating.book.author,
            cover_url:  rating.book.cover_url,
            name:  rating.book.name,
            created_at:  rating.book.created_at,
            summary:  rating.book.summary,
            total_pages:  rating.book.total_pages,
          }
        });
        return acc;
      }, []);

      setUserRatings(organizedData);
      setUser(user_response.data.user);
    } catch (error) {
      console.log(error);
    } finally {
      setIsLoading(false);
    } 
  }, [query.id]);

  const totalReadPages = 0;

  useEffect(() => {
    getLatestRatings();
  }, [getLatestRatings]);

  return (
    <>
      <Head>
        <title>Profile | Book Wise</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
              
        {/* Cards */}
        <Styled.Container>

          <Styled.Content>
             <Styled.Search>
              <SearchInput placeholder='Buscar livro ou autor' />
            </Styled.Search>

            <Styled.ExplorerBooks>
              {Object.keys(userRatings)?.map((date) => (
                <div key={date}>
                  <p style={{ marginBottom: '1rem' }}>{publishedDateFormat(date)}</p> 

                  <>
                    {userRatings[date].map(pub => (
                      <RatingCard 
                        key={pub.rating.id} 
                        book={pub.book} 
                        rating={pub.rating} 
                      /> 
                    ))}
                  </>
                </div>                
              ))}
            </Styled.ExplorerBooks>
          </Styled.Content>

          <Styled.Aside>
            <UserComponent 
              user={user}
              totalReadPages={totalReadPages} 
              amountBooks={0} 
            />
          </Styled.Aside>
        </Styled.Container>

    </>
  )
}

Profile.getLayout = function getLayout(page: ReactElement) {
  const {colors} = theme;

  return (
    <DefaultLayout title='Profile' icon={<User size={32} color={colors.green100.value} />}>
      {page}
    </DefaultLayout>
  )
}

export default Profile;